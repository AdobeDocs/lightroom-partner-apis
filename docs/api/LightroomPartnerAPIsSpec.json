{
  "swagger": "2.0",
  "info": {
    "description": "Documentation for the Lightroom APIs, made available through [adobe.io](https://www.adobe.io).",
    "version": "1.0.0",
    "title": "Lightroom API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "lr.adobe.io",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "health",
      "description": "Lightroom Services status.",
      "externalDocs": {
        "description": "More info",
        "url": "https://www.adobe.io"
      }
    },
    {
      "name": "accounts",
      "description": "Account information for the authenticated user."
    },
    {
      "name": "catalogs",
      "description": "Catalog information for the authenticated user."
    },
    {
      "name": "assets",
      "description": "Information for assets, typically images or videos."
    },
    {
      "name": "albums",
      "description": "Information for albums, which contain references to zero or more assets."
    }
  ],
  "paths": {
    "/v2/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Lightroom Services health check",
        "description": "Will return the Lightroom server version ID (a hexadecimal value not guaranteed to be sequential) if the services are up.",
        "operationId": "getHealth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200 (OK)": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                }
              }
            }
          },
          "403 (Invalid Key)": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/accounts/00000000000000000000000000000000": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve the user account metadata",
        "description": "An account is associated with each Adobe customer and contains the personal information and subscription status. This information can be obtained through the authentication APIs and is provided by Lightroom as a convenience.",
        "operationId": "getAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200 (OK)": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "Base URL that can be prepended to the 'href' values in the 'links' to produce fully qualified URLs for future queries."
                },
                "id": {
                  "$ref": "#/definitions/uuid"
                },
                "created": {
                  "$ref": "#/definitions/iso8601DateTime"
                },
                "updated": {
                  "$ref": "#/definitions/iso8601DateTime"
                },
                "type": {
                  "type": "string",
                  "enum": [ "account" ]
                },
                "email": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "wcd_guid": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "config": {
                  "type": "object"
                },
                "entitlement": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "created",
                        "trial",
                        "trial_expired",
                        "subscriber",
                        "subscriber_expired"
                      ],
                      "description": "The status can take on one of five values from created, trial, trial_expired, subscriber, and subscriber_expired. The created status indicates the user has not yet stepped into any Creative Cloud offering, whether trial or subscription. It is a minimally-entitled Adobe ID."
                    },
                    "trial": {
                      "type": "object"
                    },
                    "current_subs": {
                      "type": "object"
                    },
                    "storage": {
                      "type": "object",
                      "properties": {
                        "used": {
                          "type": "integer",
                          "description": "The size in bytes of content this account that count against the storage limit."
                        },
                        "warn": {
                          "type": "integer",
                          "description": "Value of used at which the client applications should start warning the user. Absence indicates no warning should be given."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Specifies the storage limit in bytes that should be enforced for this account. It will always be greater than or equal to the display_limit."
                        },
                        "display_limit": {
                          "type": "integer",
                          "description": "Specifies the storage limit in bytes that is displayed to the user for this account."
                        }
                      }
                    },
                    "deletion_date": {
                      "type": "string"
                    }
                  }
                },
                "payload": {
                  "type": "object"
                },
                "links": {
                  "type": "object"
                }
              },
              "example": {
                "base": "https://lr.adobe.io/",
                "id": "96e656e3812b4c2fb670fa74b6a7ad74",
                "type": "account",
                "created": "2017-09-12T17:22:41.751746Z",
                "updated": "2019-02-02T17:17:39.663862Z",
                "email": "customer@domain.com",
                "full_name": "Adobe Customer",
                "first_name": "Adobe",
                "last_name": "Customer",
                "wcd_guid": "6CEE5CFE464CC743992017B8",
                "country": "US",
                "config": {
                  "nimbus_show_different_ui": true,
                  "search_index": true,
                  "purge_assets_after": 5184000
                },
                "entitlement": {
                  "status": "subscriber",
                  "trial": {
                    "start": "2017-09-12T17:22:41.751746Z",
                    "end": "2018-02-16T10:35:24.593005Z"
                  },
                  "current_subs": {
                    "product_id": "lightroom",
                    "store": "adobe",
                    "purchase_date": "2019-02-04T07:25:59.121277Z",
                    "sao": {
                      "inpkg_CCLE": "0",
                      "inpkg_CCSN": "0",
                      "inpkg_LRMP": "1",
                      "inpkg_PHLT": "0"
                    }
                  },
                  "storage": {
                    "used": 11998409416,
                    "warn": 85899345920,
                    "limit": 112742891520,
                    "display_limit": 107374182400
                  },
                  "deletion_date": "2020-05-06T15:17:51.216255Z"
                },
                "payload": {},
                "links": {
                  "self": {
                    "href": "/v2/accounts/96e656e3812b4c2fb670fa74b6a7ad74"
                  }
                }
              }
            }
          },
          "400 (Bad UUID)": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "401 (Unauthorized)": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403 (Invalid Key)": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "404 (Not Found)": {
            "$ref": "#/components/responses/NotFound"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/00000000000000000000000000000000": {
      "get": {
        "tags": [
          "catalogs"
        ],
        "summary": "Retrieve the user catalog metadata",
        "description": "A catalog is the topmost container of resources for a user. Each catalog contains zero or more assets, albums, or other resources.",
        "operationId": "getCatalog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200 (OK)": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "Base URL that can be prepended to the 'href' values in the 'links' to produce fully qualified URLs for future queries."
                },
                "id": {
                  "$ref": "#/definitions/uuid"
                },
                "created": {
                  "$ref": "#/definitions/iso8601DateTime"
                },
                "updated": {
                  "$ref": "#/definitions/iso8601DateTime"
                },
                "type": {
                  "type": "string",
                  "enum": [ "catalog" ]
                },
                "subtype": {
                  "type": "string",
                  "enum": [ "lightroom" ]
                },
                "payload": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "title": "Catalog Payload Schema",
                  "type": "object",
                  "definitions": {},
                  "properties": {
                    "userCreated": {
                      "$ref": "#/definitions/utcDateTime"
                    },
                    "userUpdated": {
                      "$ref": "#/definitions/utcDateTime"
                    },
                    "name": {
                      "$ref": "#/definitions/max1024CharacterString"
                    },
                    "assetSortOrder": {
                      "type": "string",
                      "enum": [
                        "captureDateAsc",
                        "captureDateDesc",
                        "importTimestampAsc",
                        "importTimestampDesc",
                        "fileNameAsc",
                        "fileNameDesc",
                        "ratingAsc",
                        "ratingDesc",
                        "userUpdatedAsc",
                        "userUpdatedDesc"
                      ]
                    },
                    "presets": {
                      "type": "object",
                      "properties": {
                        "favorites": {
                          "type": "object",
                          "patternProperties": {
                            "^.{1,128}$": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    },
                    "profiles": {
                      "type": "object",
                      "properties": {
                        "favorites": {
                          "type": "object",
                          "patternProperties": {
                            "^.{1,128}$": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "universal": {
                          "type": "object",
                          "properties": {
                            "connections": {
                              "type": "object",
                              "patternProperties": {
                                "^.{1,128}$": {
                                  "type": "object",
                                  "properties": {
                                    "created": {
                                      "$ref": "#/definitions/utcDateTime"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "required": [
                                    "created"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1
                            }
                          },
                          "additionalProperties": false,
                          "minProperties": 1
                        },
                        "desktop": {
                          "type": "object",
                          "additionalProperties": true,
                          "minProperties": 1
                        },
                        "web": {
                          "type": "object",
                          "additionalProperties": true,
                          "minProperties": 1
                        },
                        "mobile": {
                          "type": "object",
                          "additionalProperties": true,
                          "minProperties": 1
                        },
                        "photosdk": {
                          "type": "object",
                          "additionalProperties": true,
                          "minProperties": 1
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "name"
                  ]
                },
                "revision_ids": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/uuid"
                  }
                },
                "links": {
                  "type": "object"
                }
              },
              "example": {
                "created": "2019-07-02T15:16:13.556610Z",
                "updated": "2019-07-02T15:26:42.838366Z",
                "base": "https://lr.adobe.io/v2/",
                "id": "bf7337d9355c41b7875c9392f918362a",
                "type": "catalog",
                "subtype": "lightroom",
                "payload": {
                  "userCreated": "2019-07-02T15:38:14Z",
                  "userUpdated": "2019-08-16T16:05:13Z",
                  "name": "Lightroom Classic Catalog Name",
                  "presets": {
                    "favorites": {
                      "09E4A533BEFC4AC582FCF1EF953EB150": true,
                      "30E266DB24AE09B97DC3DD687AC298B1": false,
                      "5C9AF6F007B96EF1E0DED43E77BE87C3": true
                    }
                  },
                  "profiles": {
                    "favorites": {
                      "53A4A533BAFB4AB582FBF1AF353AB155": true,
                      "35A266DB24AA53B37DB3DD687AB238B1": true,
                      "5B3AF6F557B36AF1A5DAD43A77BA87B3": false
                    }
                  },
                  "settings": {
                    "universal": {
                      "connections": {
                        "connection_api_key": {
                          "created": "2019-07-02T15:26:42.838366Z"
                        }
                      }
                    },
                    "desktop": {
                      "desktop_key": "desktop_setting"
                    },
                    "web": {
                      "web_key": "web_setting"
                    },
                    "mobile": {
                      "mobile_key": "mobile_setting"
                    },
                    "photosdk": {
                      "sdk_key": "sdk_setting"
                    }
                  }
                },
                "revision_ids": [
                  "9a91927e",
                  "d61b7077"
                ],
                "links": {
                  "self": {
                    "href": "catalogs/bf7337d9355c41b7875c9392f918362a"
                  }
                }
              }
            }
          },
          "400 (Bad UUID)": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "401 (Unauthorized)": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403 (Invalid Key)": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "403 (Forbidden Account)": {
            "$ref": "#/components/responses/ForbiddenAccount"
          },
          "403 (Forbidden)": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404 (Not Found)": {
            "$ref": "#/components/responses/NotFound"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/{catalog_id}/assets/{asset_id}/revisions/{revision_id}": {
      "put": {
        "tags": [
          "assets"
        ],
        "summary": "Create asset revision",
        "description": "Create a new asset with an initial revision.",
        "operationId": "createAssetRevision",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog_id",
            "in": "path",
            "description": "Identifier of the catalog in which the asset and revision will be created.",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "Client-generated Lightroom unique identifier for the new asset.",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision_id",
            "in": "path",
            "description": "Client-generated Lightroom unique identifier for the new revision.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Initial asset metadata and import information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subtype": {
                  "type": "string",
                  "enum": [ "image", "video" ]
                },
                "payload": {
                  "type": "object",
                  "properties": {
                    "userCreated": {
                      "$ref": "#/definitions/iso8601DateTime"
                    },
                    "userUpdated": {
                      "$ref": "#/definitions/iso8601DateTime"
                    },
                    "captureDate": {
                      "type": "string",
                      "enum": [ "0000-00-00T00:00:00", "#/definitions/iso8601DateTime" ],
                      "required": true,
                      "description": "Capture date of the asset in ISO-8601 format. Will be populated by the server automatically from the master if set to '0000-00-00T00:00:00'"
                    },
                    "importSource": {
                      "type": "object",
                      "properties": {
                        "fileName": {
                          "type": "string",
                          "required": true
                        },
                        "importedOnDevice": {
                          "type": "string",
                          "required": true,
                          "description": "Name of the device that imported the image."
                        },
                        "importedBy": {
                          "type": "string",
                          "required": true,
                          "description": "Account ID of the user who imported the asset."
                        },
                        "importTimestamp": {
                          "$ref": "#/definitions/iso8601DateTime",
                          "required": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201 (Created)": {
            "description": "Created"
          },
          "400 (Bad UUID)": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "400 (Bad JSON)": {
            "$ref": "#/components/responses/BadRequestJSON"
          },
          "400 (Bad Subtype)": {
            "$ref": "#/components/responses/BadRequestSubtype"
          },
          "400 (Bad Payload)": {
            "$ref": "#/components/responses/BadRequestPayload"
          },
          "401 (Unauthorized)": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403 (Invalid Key)": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "403 (Exists)": {
            "$ref": "#/components/responses/ForbiddenExists"
          },
          "403 (Storage)": {
            "$ref": "#/components/responses/ForbiddenQuota"
          },
          "412 (Exists)": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415 (Unsupported)": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/{catalog_id}/assets/{asset_id}/revisions/{revision_id}/master": {
      "put": {
        "tags": [
          "assets"
        ],
        "summary": "Create an asset master file",
        "description": "Create and upload a master file for the asset. Up to 200 MB may be uploaded per invocation, and larger files may be uploaded by calling this API multiple times with Content-Range headers for each part. When all parts are received the upload will be consolidated asynchronously. All partial uploads should include optional rendition type parameters to ensure the last part received has the necessary options for request post-processing.",
        "operationId": "createAssetMaster",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "Length in bytes of the content.",
            "type": "integer"
          },
          {
            "name": "Content-Range",
            "in": "header",
            "description": "Byte range for the request, including first and last bytes and entity length as defined in RFC 2616.",
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type. For jpeg assets, the only allowed type is 'image/jpeg'. For camera raw assets the type is 'application/octet-stream'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog_id",
            "in": "path",
            "description": "Identifier of the catalog in which the asset and revision will be created.",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "Identifier of the asset to which the XMP settings are associated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision_id",
            "in": "path",
            "description": "Identifier of the revision to which the XMP settings are associated.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400 Bad UUID": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "401 Unauthorized": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403 Invalid Key": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "413": {
            "$ref": "#/components/responses/TooLarge"
          },
          "415 Unsupported": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/{catalog_id}/albums/{album_id}": {
      "put": {
        "tags": [
          "albums"
        ],
        "summary": "Create album",
        "description": "Create a new album.",
        "operationId": "createAlbum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog_id",
            "in": "path",
            "description": "Identifier of the catalog containing the album.",
            "required": true,
            "type": "string"
          },
          {
            "name": "album_id",
            "in": "path",
            "description": "Client-generated Lightroom unique identifier for the new album.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Initial album metadata and information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subtype": {
                  "type": "string",
                  "enum": [ "project", "project_set" ]
                },
                "serviceId": {
                  "type": "string",
                  "description": "The API Key (client identifier) of the service creating the album."
                },
                "payload": {
                  "$ref": "#/definitions/albumPayload"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400 Bad JSON": {
            "$ref": "#/components/responses/BadRequestJSON"
          },
          "400 Bad Payload": {
            "$ref": "#/components/responses/BadRequestPayload"
          },
          "401 Unauthorized": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403 Invalid Key": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "403 Exists": {
            "$ref": "#/components/responses/ForbiddenExists"
          },
          "415 Unsupported": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/{catalog_id}/albums": {
      "get": {
        "tags": [
          "albums"
        ],
        "summary": "Retrieve albums",
        "description": "Retrieve a list of existing albums.",
        "operationId": "getAlbums",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog_id",
            "in": "path",
            "description": "Identifier of the catalog containing the album.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Comma-separated list of subtypes to enumerate. Subtype can be one of 'project' or 'project_set'.",
            "type": "string"
          },
          {
            "name": "name_after",
            "in": "query",
            "description": "UTF-8 string representing the name of the album that should precede the current page of results. In other words, the response will contain result with names greater than the 'name_after' value using standard string ordering relations.",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of albums to return. Default value is 100. Please note that the response may contain more than 'limit' number of albums returned if multiple albums at the 'limit' boundary have the same name_after.",
            "type": "integer"
          }
        ],
        "responses": {
          "200 OK": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "Base URL that can be prepended to the 'href' values in the 'links' to produce fully qualified URLs for future queries."
                },
                "resources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/uuid"
                      },
                      "created": {
                        "$ref": "#/definitions/iso8601DateTime"
                      },
                      "updated": {
                        "$ref": "#/definitions/iso8601DateTime"
                      },
                      "type": {
                        "type": "string",
                        "enum": [ "album" ]
                      },
                      "subtype": {
                        "type": "string",
                        "enum": [ "project", "project_set" ]
                      },
                      "serviceId": {
                        "type": "string",
                        "description": "The API Key (client identifier) of the service affiliated with the album."
                      },
                      "payload": {
                        "$ref": "#/definitions/albumPayload"
                      },
                      "links": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400 Bad UUID": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "401 Unauthorized": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "403 Invalid Key": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415 Unsupported": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/v2/catalogs/{catalog_id}/albums/{album_id}/assets": {
      "put": {
        "tags": [
          "albums"
        ],
        "summary": "Add assets to album",
        "description": "Add many assets to the album. Note that there is no default defined order/position for the asset in the album. A payload may be provided with cover, order, and any other data allowed in the data model. If the asset already exists in the album and the cover field is supplied, then no error is thrown but only the cover update is applied and other entries in the payload are completely ignored. In all other cases trying to add an asset to an album that is already in the album will return an error. Limited to 50 assets per API call. Returns http status 201 if at least one asset was added to the album. If all assets could not be added, http status 403 is returned. Individual error codes are returned for each asset in the response body.",
        "operationId": "addAssetsToAlbum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Key",
            "in": "header",
            "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer [token] - User access token of an authenticated Lightroom customer",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog_id",
            "in": "path",
            "description": "Identifier of the catalog containing the album.",
            "required": true,
            "type": "string"
          },
          {
            "name": "album_id",
            "in": "path",
            "description": "Identifier of the album.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Album asset metadata and information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/uuid",
                        "description": "UUID of the asset to be added to the album."
                      },
                      "payload": {
                        "type": "object",
                        "properties": {
                          "cover": {
                            "type": "boolean",
                            "description": "Whether this asset should be used as the album cover."
                          },
                          "order": {
                            "$ref": "#/definitions/lex64SortOrderString"
                          },
                          "publishInfo": {
                            "type": "object",
                            "properties": {
                              "servicePayload": {
                                "type": "string",
                                "description": "Album asset metadata, unique to the service, encapsulated as a single string with a maximum length of 1024 characters."
                              },
                              "remoteId": {
                                "type": "string",
                                "description": "Identifier for the album asset that is unique to the publishing service."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "Base URL that can be prepended to the 'href' values in the 'links' to produce fully qualified URLs for future queries."
                },
                "resources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/uuid"
                      },
                      "href": {
                        "type": "string"
                      }
                    }
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/uuid"
                      },
                      "http_status": {
                        "type": "integer"
                      },
                      "code": {
                        "type": "integer"
                      },
                      "description": {
                        "type": "string"
                      },
                      "subtype": {
                        "type": "string"
                      },
                      "errors": {
                          "type": "object",
                          "properties": {
                            "asset": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                      }
                    }
                  }
                }
              }
            }
          },
          "400 Bad UUID": {
            "$ref": "#/components/responses/BadRequestGUID"
          },
          "401 Unauthorized": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "403 Invalid Key": {
            "$ref": "#/components/responses/ForbiddenKey"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "503 (Unavailable)": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequestGUID": {
        "description": "The request failed due to an invalid resource identifier.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "<param_name>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "Must be a valid GUID"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1005 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Input Validation Error" ]
            }
          }
        }
      },
      "BadRequestJSON": {
        "description": "The request failed due to an invalid JSON.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "Must be valid JSON"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1005 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Input Validation Error" ]
            }
          }
        }
      },
      "BadRequestSubtype": {
        "description": "The request failed due to an invalid subtype.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "<subtype>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "is invalid"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1005 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Input Validation Error" ]
            }
          }
        }
      },
      "BadRequestPayload": {
        "description": "The request failed due to an invalid payload. The errors hash returned will specify which payload keys had issues and whether the value was invalid, whether the key is required and missing, or whether the key is not allowed.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "payload.<key>.<subkey>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "invalid", "disallowed", "required" ]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1030 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Payload Validation Error" ]
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The request failed due to missing or invalid authentication token."
      },
      "ForbiddenKey": {
        "description": "The request failed because the API Key is not valid.",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "enum": [ 403003 ]
            },
            "description": {
              "type": "string",
              "enum": [ "API Key is invalid" ]
            }
          }
        }
      },
      "ForbiddenAccount": {
        "description": "The request failed due to the account state.",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "enum": [ 4301 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Access forbidden due to account state of resource owner" ]
            }
          }
        }
      },
      "ForbiddenExists": {
        "description": "The request failed due to the account state.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "<resource_type>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "already exists"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1002 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Resource already exists" ]
            }
          }
        }
      },
      "ForbiddenQuota": {
        "description": "The request failed due to insufficient storage under the entitlement.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "<asset_id>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "quota exceeded"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1034 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Too many assets" ]
            }
          }
        }
      },
      "Forbidden": {
        "description": "The request failed due to insufficient permissions.",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "enum": [ 4300 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Access is forbidden" ]
            }
          }
        }
      },
      "NotFound": {
        "description": "The request failed because the resource being requested does not exist.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "<resource_type>": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "does not exist"]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1000 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Resource not found" ]
            }
          }
        }
      },
      "PreconditionFailed": {
        "description": "The request failed because the master file matching the provided SHA-256 hash already exists. The response body lists the matching master files.",
        "schema": {
          "type": "object",
          "properties": {
            "base": "string"
          }
        }
      },
      "TooLarge": {
        "description": "The request failed because it is too large.",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "enum": [ 1007 ]
            },
            "description": {
              "type": "string",
              "enum": [ "The resource is too big" ]
            }
          }
        }
      },
      "UnsupportedMediaType": {
        "description": "The request failed because the Content-Type did not match the request.",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "properties": {
                "content_type": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [ "should be json", "should match the subtype of the asset" ]
                  }
                }
              }
            },
            "code": {
              "type": "integer",
              "enum": [ 1003 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Invalid content type" ]
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "The request failed because the service is temporarily unavailable. Try again later.",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "enum": [ 9999 ]
            },
            "description": {
              "type": "string",
              "enum": [ "Service is temporarily unavailable" ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "iso8601DateTime": {
      "description": "datetime in ISO-8601 format (e.g. 2016-01-15T16:18:00-05:00) with both date and time required, including seconds, but timezone optional. Also flexible on allowing some nonstandard timezone formats like 2016-01-15T12:10:32+0000 or 2016-01-15T12:10:32-05.",
      "type": "string",
      "pattern": "^([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]|[0-9][1-9][0-9]{2}|[1-9][0-9]{3})-((02-([1-2][0-9]|0[1-9]))|((01|03|05|07|08|10|12)-(3[0-1]|[1-2][0-9]|0[1-9]))|((04|06|09|11)-(30|[1-2][0-9]|0[1-9])))T(2[0-3]|[0-1][0-9]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(((\\+|-)(2[0-3]|[0-1][0-9])(:?[0-5][0-9])?)|Z)?$"
    },
    "utcDateTime": {
      "description": "datetime in RFC-3339 format (subset of ISO-8601) requiring a UTC time ending with Z (so -00:00 or +00-00 suffix NOT allowed). The datetime must have date and time, including seconds, e.g. 2016-01-15T09:23:34Z.",
      "type": "string",
      "pattern": "^([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]|[0-9][1-9][0-9]{2}|[1-9][0-9]{3})-((02-([1-2][0-9]|0[1-9]))|((01|03|05|07|08|10|12)-(3[0-1]|[1-2][0-9]|0[1-9]))|((04|06|09|11)-(30|[1-2][0-9]|0[1-9])))T(2[0-3]|[0-1][0-9]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?Z$"
    },
    "max1024CharacterString": {
      "type": "string",
      "minLength": 1,
      "maxLength": 1024
    },
    "uuid": {
      "type": "string",
      "pattern": "^[a-f0-9]{32}$"
    },
    "lex64SortOrderString": {
      "type": "string",
      "pattern": "^[-_0-9a-zA-Z]*[_0-9a-zA-Z]$",
      "minLength": 1,
      "maxLength": 1024
    },
    "albumPayload": {
      "type": "object",
      "properties": {
        "userCreated": {
          "$ref": "#/definitions/iso8601DateTime"
        },
        "userUpdated": {
          "$ref": "#/definitions/iso8601DateTime"
        },
        "name": {
          "type": "string"
        },
        "cover": {
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/uuid",
              "description": "Lightroom guid for the asset serving as the cover for the album."
            }
          }
        },
        "parent": {
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/uuid",
              "description": "Lightroom guid for the direct parent of the new album."
            }
          }
        },
        "publishInfo": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "enum": [ 3 ],
              "description": "The version of the publish information; must be 3."
            },
            "servicePayload": {
              "type": "string",
              "description": "Album metadata, unique to the service, encapsulated as a single string with a maximum length of 1024 characters."
            },
            "remoteId": {
              "type": "string",
              "description": "Identifier for the album that is unique to the publishing service."
            },
            "created": {
              "$ref": "#/definitions/iso8601DateTime",
              "description": "Date when the externally affiliated content (identified by remoteId) was created."
            },
            "updated": {
              "$ref": "#/definitions/iso8601DateTime",
              "description": "Date when the externally affiliated content identified by remoteId) was last updated."
            },
            "deleted": {
              "type": "boolean",
              "description": "True if the externally affiliated content (identified by remoteId) was deleted; acts as a tombstone."
            },
            "remoteLinks": {
              "type": "object",
              "description": "Links to affiliated URLs on the publishing service.",
              "properties": {
                "edit": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "description": "Fully-formed URL to a location to edit affiliated content (identified by remoteId) on the external service."
                    }
                  }
                },
                "view": {
                  "properties": {
                    "href": {
                      "type": "string",
                      "description": "Fully-formed URL to a location to view affiliated content (identified by remoteId) on the external service."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Lightroom",
    "url": "https://www.adobe.com/products/photoshop-lightroom.html"
  }
}
